@inherits LayoutComponentBase

@inject NavigationManager NavigationManager

<div class="page">
    <div class="sidebar" style="@MyStyle">
        <AdminNavMenu />
    </div>

    <main>
        <div class="top-row px-4 justify-content-between">
            <AuthorizeView Policy="Admin">
                <div class="nav-item px-3 hamburger">
                    <button class="navbar-toggler" type="button" data-mdb-collapse-init
                            data-mdb-target="#navbarToggleExternalContent" aria-controls="navbarToggleExternalContent"
                            aria-expanded="false" aria-label="Toggle navigation" @onclick="toggleSidebar">
                        <i class="fa-solid fa-bars"></i>
                    </button>
                </div>

                <div class="top-row nav-item">
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                        </form>
                    </div>
                </div>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string? currentUrl;
    private bool expand = false;
    public string? MyStyle = "left: -100%;";

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void toggleSidebar()
    {
        expand = !expand;

        if (expand)
        {
            MyStyle = "left: -100%; position: fixed !important; transition: all linear 0.7s;";
        }
        else
        {
            MyStyle = "left: -100%; position: static !important; transition: all linear 0.7s;";
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
